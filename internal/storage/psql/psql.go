package psql

import (
	"database/sql"
	"errors"
	"fmt"
	"go_sql_test/internal/storage"

	"github.com/jmoiron/sqlx"
	"github.com/lib/pq"
)

type Storage struct{
	db *sqlx.DB
}

func New(storageUrl string) (*Storage, error) {
	const fnNm = "storage.psql.New"

	db, err := sqlx.Open("postgres", storageUrl)
	if err != nil {
		return nil, fmt.Errorf("%s: %w", fnNm, err)
	}


//this is tempcode about migration

	stmt, err := db.Preparex(
		`CREATE TABLE IF NOT EXISTS url(
			id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
			alias VARCHAR(255) NOT NULL UNIQUE,
			url VARCHAR(255) NOT NULL);
		`)
	if err != nil {
		return nil, fmt.Errorf("%s: %w", fnNm, err)
	}	

//tempcode end

	_, err = stmt.Exec()
	if err != nil{
		return nil, fmt.Errorf("%s: %w", fnNm, err)
	}

	return &Storage{db: db}, nil
}

func (s *Storage) SaveURL(urlToSave string, alias string) (int, error){
	const fnNm = "storage.psql.SaveURL"

	//stmt, err := s.db.Preparex(`INSERT INTO url("url","alias") VALUES ($1,$2) RETURNING id`)
	//if err != nil{
	//	return 0, fmt.Errorf("%s: %w", fnNm, err)
	//}

	id := 0
	err := s.db.QueryRowx(`INSERT INTO url("url","alias") VALUES ($1,$2) RETURNING id`, urlToSave, alias).Scan(&id)
	if err != nil{
		// used var pqUV instead of 23505 hardcode in "if pqErr" at 59 Line
		var pqUV pq.ErrorCode = "23505"
		if pqErr, ok := err.(*pq.Error); ok && pqErr.Code == pqUV{
			return 0, fmt.Errorf("%s: %w", fnNm, storage.ErrUrlExists)
		}

		return 0, fmt.Errorf("%s: %w", fnNm, err)
	}

	//tempshitcode
	//_ = res
	//end of tempcode
	
	//used this instead of LastInsertId because postgre doesnt support it

	//var id int
	//ierr := stmt.QueryRowx(&id, arg).Scan()
	//if ierr != nil {
	//	return 0, fmt.Errorf("%s: failed to get last insert id: %w", fnNm, err)
	//}

	return id, nil
}

func (s *Storage) GetURL(alias string) (string, error){
	const fnNm = "storage.psql.GetURL"

	var res string
	err := s.db.QueryRowx(`SELECT url FROM url WHERE alias LIKE $1 `, alias).Scan(&res)
	if errors.Is(err, sql.ErrNoRows) {
		return "", storage.ErrURLNotFound
	}
	if err != nil {
		return "", fmt.Errorf("%s: execute statement: %w", fnNm, err)
	}
	return res, nil
}

// TODO: try to make DeleteURL after watching guide